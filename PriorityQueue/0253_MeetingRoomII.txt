Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.

 
Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2

Example 2:
Input: intervals = [[7,10],[2,4]]
Output: 1
 

Constraints:

1 <= intervals.length <= 104
0 <= starti < endi <= 106






int MinMeetingRooms(vector<vector<int>>& intervals){
  std::sort(intervals.begin(), intervals.end(), [](const auto& a, const auto& b){
            return a[0] < b[0] || (a[0]==b[0] && a[1] < b[1]);});
  
  int count = 0;
  priority_queue<int, vector<int>, greater<int>> pq;
  for(const auto& interval : intervals){
    if(!pq.empty() && interval[0]>pq.top()){
      pq.pop();
    }else{
      count ++;
    }
    pq.push(interval[1]);
  }
  return count;

}
